'Made by Michael Dao
'Started on 20/08/15 
'Finished on 20/08/15 
'This program will challenge the player to guess a number between 1 and 100
'various comments will appear over choices that the player makes in efforts to guide or make remarks about decisions made

'n = number of seconds elapsed
'm = number if minutes elapsed
'h = number of hours elapsed
'gvalue = value guessed by player
'rvalue = random value generated by game
'counter is required by the timer and pause subroutine
'endflag indicates when the game is complete

Public Class frmChallenge_The_Computer
    'declare variables
    Dim gValue, rValue, counter As Integer
    Dim n, m, h As Integer
    Dim endflag As Integer

    Private Sub challenge()
        'this is used to issue a challenge to the player in lblComment
        lblComment.Text = "Challenge the Computer! Choose a number between 1 and 100."
    End Sub

    Private Sub btnQuit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnQuit.Click
        'exits the program and adds a comment
        lblComment.Text = "Goodbye"
        Call Pause()
        Me.Close()
        frmMenu.Show()
    End Sub

    Private Sub btnStop_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnStop.Click
        'creates a comment directed at the player for pressing btnStop and starts the endgame subroutine
        If endflag = 0 Then
            lblComment.Text = "May as well give up on life"
        End If
        Call endgame()
    End Sub

    Private Sub endgame()
        'This subroutine resets the conditions of various controls once the game is completed
        endflag = 1
        btnStart.Enabled = True
        btnStop.Enabled = False
        txtNumber.Enabled = False
        Timer2.Enabled = False
    End Sub

    Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
        'sets the initial conditions of the controls
        Call challenge()
        btnStop.Enabled = False
        txtNumber.Enabled = False
        Timer2.Enabled = False
    End Sub

    Private Sub Random()
        'uses the .NET Random function to generate a number between 1 and 100
        Dim rand As New Random(CInt(Date.Now.Ticks And Integer.MaxValue))
        rValue = Int(rand.Next(1, 100))
    End Sub

    Private Sub Pause()
        'this procedure creates a pause that can be used to slow down and control execution of the program
        'when Timer1 tick counter goes from 1000 to 1 where the normal code execution resumes
        counter = 1
        Timer1.Enabled = True
        Timer1.Interval = 1000
        Do While Timer1.Enabled
            Application.DoEvents()
            If counter > 1 Then
                Timer1.Enabled = False
                Exit Do
            End If
        Loop
    End Sub

    Private Sub Timer1_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Timer1.Tick
        'counts out time taken by the player to solve the game
        counter = counter + 1
    End Sub

    Private Sub Timer2_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Timer2.Tick
        'this routine increments the seconds, minutes, hours timer as the game is being played
        If endflag = 0 Then
            lblSeconds.Text = CStr(n)
            If n = 60 Then
                lblSeconds.Text = ""
                lblMinutes.Text = CStr(m + 1)
                n = 0
            End If
            If m = 60 Then
                lblMinutes.Text = ""
                lblHours.Text = CStr(h + 1)
                m = 0
            End If
        End If
        n = n + 1
    End Sub

    Private Sub txtNumber_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtNumber.TextChanged
        'this forces the game to pause for a couple of seconds after the player enters a new value
        'creates the illusion that the computer is thinking after the value has been entered
        Call Pause()
        Call Pause()
    End Sub

    Private Sub btnStart_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnStart.Click
        'Most of the game is managed from this procedure
        'Set some intitial conditions
        btnStart.Enabled = False
        btnStop.Enabled = True
        endflag% = 0
        n% = 1
        m% = 0
        h% = 0
        lblMinutes.Text = ""
        lblHours.Text = ""
        lblSeconds.Text = ""
        Timer2.Interval = 1000
        Timer2.Enabled = True

        'Generates a random value for the player to guess
        Call Random()

        'Enables the input box and clears any previous entries
        txtNumber.Enabled = True
        txtNumber.Clear()

        'Apply the focus to the number input box
        txtNumber.Focus()
        lblComment.Text = "Get ready"

        'Allow some time for the player to read the message 
        Call Pause()
        Call Pause()

        'Checks to see if guess box is empty and uses a loop to hold the game until a value is entered 
        Do While txtNumber.Text = ""
            lblComment.Text = "Type your guess into the guess box"
            Call Pause()
            If Not txtNumber.Text = "" Then
                Exit Do
            End If
        Loop

        'Uses exception handling to make sure that player enters a valid number and if not, assigns a dummy value to the players guess
        Try
            gValue = txtNumber.Text
            If gValue > 100 Then gValue = -1
            If gValue < 1 Then gValue = -1
        Catch
            gValue = -1
        End Try

        'If player hasn't entered a valid number then hold the game until it happens
        Do While gValue = -1
            txtNumber.Text = 0
            txtNumber.SelectAll()

            'Create a blink effect
            lblComment.Text = "Try typing a number between 1 and 100"
            Call Pause()
            lblComment.Text = ""
            Call Pause()

            'Check for a valid entry again
            Try
                gValue = txtNumber.Text
                If gValue > 100 Then gValue = -1
                If gValue < 1 Then gValue = -1
            Catch
                gValue = -1
            End Try
            If Not gValue = -1 Then
                Exit Do
            End If
            If endflag = 1 Then
                Exit Do
            End If
        Loop

        'This is the main game loop, it evaluates if the player has correctly guessed the random value
        Do While Not gValue = rValue

            'Check if game has been ended
            If endflag = 1 Then
                Exit Do
            End If

            'The following Select/Case statement returns an appropriate comment depending on the accuracy of the player's guess
            Select Case gValue
                Case Is > (rValue + 30)
                    lblComment.Text = "Cold! Far too high. Try again"
                Case Is < (rValue - 30)
                    lblComment.Text = "Cold! Far too low. Try again"
                Case Is > (rValue + 10) And gValue < (rValue + 30)
                    lblComment.Text = "That is way too high. Try again"
                Case Is < (rValue - 10) And gValue > (rValue - 30)
                    lblComment.Text = "That is way too low. Try again"
                Case Is > (rValue + 5) And gValue < (rValue + 10)
                    lblComment.Text = "Getting warm but still too high"
                Case Is < (rValue - 5) And gValue > (rValue - 10)
                    lblComment.Text = "Getting warm but still too low"
                Case Is > (rValue) And gValue < (rValue + 5)
                    lblComment.Text = "Getting very hot but still too high"
                Case Is < (rValue) And gValue > (rValue - 5)
                    lblComment.Text = "Getting very hot but still too low"

                    'Include a general catch all in case a guessed number is not covered by any of the above
                Case Else
                    lblComment.Text = "You have missed completely"
            End Select

            'Select and highlight player entry in the text box
            txtNumber.SelectAll()

            'Slow the game response time down a little to allow the player to read the comment
            Call Pause()
            Call Pause()

            'Check if game has been ended
            If endflag = 1 Then
                Exit Do
            End If

            'Use an exception handler to make sure player types a valid(number)
            Try
                'Hold the game until player enters a different value to the previous games
                Do While gValue = txtNumber.Text
                    lblComment.Text = "Try another guess"
                    Call Pause()
                    If endflag = 1 Then
                        Exit Do
                    End If
                Loop
                gValue = txtNumber.Text
                If gValue > 100 Then gValue = -1
                If gValue < 1 Then gValue = -1
            Catch
                gValue = -1
            End Try

            'If player hasn't entered a valid number then hold the game until it happens
            Do While gValue = -1
                txtNumber.Text = 0
                txtNumber.SelectAll()

                'Create a blink effect
                lblComment.Text = "Try typing a number between 1 and 100"
                Call Pause()
                lblComment.Text = ""
                Call Pause()
                Try
                    gValue = txtNumber.Text
                    If gValue > 100 Then gValue = -1
                    If gValue < 1 Then gValue = -1
                Catch
                    gValue = -1
                End Try
                If Not gValue = -1 Then
                    Exit Do
                End If
                If endflag = 1 Then
                    Exit Do
                End If
            Loop
        Loop

        'Check if player has worked out correct value and return a comment
        If endflag = 0 Then
            lblComment.Text = "Congratulations! You Worked it Out! have another go!"
        End If
        Call endgame()
    End Sub
End Class
